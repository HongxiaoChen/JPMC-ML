import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.distributions.empirical_distribution import ECDF
from hnn_nuts_olm import nuts_hnn_sample, get_model
from get_args import get_args
from pathlib import Path
from datetime import datetime
import time
import logging
from utils import setup_logger, compute_ess


def plot_figure8(samples_nuts, samples_lhnn, burn_in):
    """
    Generate Figure 8: Comparison of NUTS and LHNN-NUTS sampling results.

    This function creates:
    1. A scatter plot comparing NUTS and LHNN-NUTS samples.
    2. Empirical cumulative distribution functions (eCDFs) for q1 and q2.

    Parameters
    ----------
    samples_nuts : np.ndarray
        Samples generated by NUTS.
    samples_lhnn : np.ndarray
        Samples generated by LHNN-NUTS.
    burn_in : int
        Number of initial samples to discard as burn-in.
    """
    logger = logging.getLogger('2D_Neal_Comparison')
    logger.info("Creating scatter plot matrix...")

    # ** Remove burn-in samples **
    samples_nuts = samples_nuts[:, burn_in:, :]
    samples_lhnn = samples_lhnn[:, burn_in:, :]
    plt.figure(figsize=(15, 4))

    # ** Subplot 1: Scatter plot of q1 vs q2 **
    plt.subplot(131)
    plt.scatter(samples_nuts[0, :, 0], samples_nuts[0, :, 1],
                alpha=0.5, label='NUTS', color='blue', s=1)
    plt.scatter(samples_lhnn[0, :, 0], samples_lhnn[0, :, 1],
                alpha=0.5, label='LHNN-NUTS', color='red', s=1)
    plt.xlabel('q1')
    plt.ylabel('q2')
    plt.legend()
    plt.title('(a)')

    # ** Subplot 2: eCDF for q1 **
    plt.subplot(132)
    x_eval = np.linspace(-5, 15, 1000)
    ecdf_nuts = ECDF(samples_nuts[0, :, 0])
    ecdf_lhnn = ECDF(samples_lhnn[0, :, 0])

    plt.plot(x_eval, ecdf_nuts(x_eval), 'b-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn(x_eval), 'r--', label='LHNN-NUTS')
    plt.xlabel('q1')
    plt.ylabel('Probability')
    plt.legend()
    plt.title('(b)')

    # ** Subplot 3: eCDF for q2 **
    plt.subplot(133)
    x_eval = np.linspace(-600, 600, 1000)
    ecdf_nuts = ECDF(samples_nuts[0, :, 1])
    ecdf_lhnn = ECDF(samples_lhnn[0, :, 1])

    plt.plot(x_eval, ecdf_nuts(x_eval), 'b-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn(x_eval), 'r--', label='LHNN-NUTS')
    plt.xlabel('q2')
    plt.ylabel('Probability')
    plt.legend()
    plt.title('(c)')

    # ** Save and display the figure **
    figures_dir = Path("figures")
    if not figures_dir.exists():
        figures_dir.mkdir(parents=True)
        print(f"\nCreated directory: {figures_dir}")

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = figures_dir / f'figure_8_reproduction_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.tight_layout()
    plt.show()
    logger.info(f"Plot saved to {filename}")


def compute_neals_funnel_metrics(samples_nuts, nuts_grads,
                                 samples_lhnn, lhnn_monitoring_grads,
                                 burn_in=5000):
    """
    Compute performance metrics for 2D Neal's Funnel.

    This function computes:
    1. Effective Sample Size (ESS) for NUTS and LHNN-NUTS.
    2. Number of gradients evaluated during sampling.
    3. ESS per gradient for both methods.

    Parameters
    ----------
    samples_nuts : np.ndarray
        Samples generated by NUTS.
    nuts_grads : int
        Total number of gradients evaluated by NUTS.
    samples_lhnn : np.ndarray
        Samples generated by LHNN-NUTS.
    lhnn_monitoring_grads : int
        Total number of gradients evaluated during error monitoring by LHNN-NUTS.
    burn_in : int, optional
        Number of initial samples to discard as burn-in. Defaults to 5000.

    Returns
    -------
    dict
        A dictionary containing ESS, total gradients, and ESS per gradient for
        NUTS and LHNN-NUTS.
    """
    logger = logging.getLogger('2D_Neal_Comparison')
    logger.info("Computing ESS for NUTS samples...")

    # ** Create logs directory if it doesn't exist **
    logs_dir = Path("logs")
    if not logs_dir.exists():
        logs_dir.mkdir(parents=True)
        print(f"\nCreated directory: {logs_dir}")

    # ** Create a timestamped log file **
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = logs_dir / f'neals_funnel_metrics_{timestamp}.log'

    def log_print(message):
        """
        Log a message to both the console and the log file.
        """
        print(message)
        with open(log_file, 'a') as f:
            f.write(message + '\n')

    # ** Compute ESS for NUTS and LHNN-NUTS **
    ess_nuts = compute_ess(samples_nuts, burn_in)
    ess_lhnn = compute_ess(samples_lhnn, burn_in)

    # ** Compute training gradients for LHNN-NUTS **
    training_grads = 40 * 250 * 40  # Mt=40, T=250, 40 steps per unit

    # ** Log performance metrics **
    log_print("\n=== 2-D Neal's Funnel Performance Comparison ===")
    log_print("{:<15} {:<25} {:<20} {:<15}".format(
        "Method", "ESS", "# gradients", "ESS per grad"))
    log_print("-" * 75)

    # ** NUTS Metrics **
    total_grads_nuts = nuts_grads
    avg_ess_nuts = np.mean(ess_nuts)
    ess_per_grad_nuts = avg_ess_nuts / total_grads_nuts
    log_print("{:<15} ({:.2f}, {:.2f})".format("NUTS", *ess_nuts))
    log_print("{:<40} {:<20} {:.6f}".format(
        "", total_grads_nuts, ess_per_grad_nuts))
    log_print("")

    # ** LHNN-NUTS Metrics **
    total_grads_lhnn = training_grads + lhnn_monitoring_grads
    avg_ess_lhnn = np.mean(ess_lhnn)
    ess_per_grad_lhnn = avg_ess_lhnn / total_grads_lhnn
    log_print("{:<15} ({:.2f}, {:.2f})".format("LHNN-NUTS", *ess_lhnn))
    log_print("{:<40} Evaluation: {}".format("", lhnn_monitoring_grads))
    log_print("{:<40} Training: {}".format("", training_grads))
    log_print("{:<40} {:<20} {:.6f}".format(
        "", total_grads_lhnn, ess_per_grad_lhnn))

    return {
        'NUTS': {'ess': ess_nuts, 'grads': total_grads_nuts, 'ess_per_grad': ess_per_grad_nuts},
        'LHNN': {'ess': ess_lhnn, 'grads': total_grads_lhnn, 'ess_per_grad': ess_per_grad_lhnn}
    }


def run_neals_funnel_comparison():
    """
    Run the comparison experiments for 2D Neal's Funnel.

    This function:
    1. Configures the sampling parameters for NUTS and LHNN-NUTS.
    2. Runs the sampling using both methods.
    3. Computes performance metrics (ESS, gradients, ESS per gradient).
    4. Generates Figure 8 to visualize the comparison.
    """
    logger = setup_logger('2D_Neal_Comparison')
    start_time = time.time()

    # ** Set up basic parameters **
    args = get_args()
    args.dist_name = '2D_Neal_funnel'
    args.input_dim = 4  # 2D Neal's funnel
    args.latent_dim = 2
    args.total_samples = 10  # Total samples (adjust as needed)
    args.burn_in = 5  # Burn-in samples
    args.nuts_step_size = 0.025
    args.hnn_error_threshold = 10.0
    args.num_chains = 1
    args.n_cooldown = 20

    logger.info("Starting 2D Neal funnel comparison with parameters:")
    for arg in vars(args):
        logger.info(f"{arg}: {getattr(args, arg)}")

    # ** Run traditional NUTS **
    logger.info("\n===== Running Traditional NUTS =====")
    model_trad = get_model(args)
    samples_nuts, accept_nuts, errors_nuts, nuts_grads = nuts_hnn_sample(
        model_trad, args,
        traditional_only=True
    )
    logger.info(f"NUTS sampling completed. Accept rate: {np.mean(accept_nuts.numpy()):.4f}")
    logger.info(f"Number of monitoring gradient evaluations: {nuts_grads}")

    # ** Run LHNN-NUTS **
    logger.info("\n===== Running LHNN-NUTS =====")
    model_lhnn = get_model(args)
    model_lhnn.load_weights(f"{args.save_dir}/2D_Neal_funnel250")
    logger.info(f"Loading pretrained model from {args.save_dir}/nD_Rosenbrock250")
    logger.info("Starting LHNN-NUTS sampling...")
    samples_lhnn, accept_lhnn, errors_lhnn, lhnn_monitoring_grads = nuts_hnn_sample(
        model_lhnn, args,
        traditional_only=False
    )
    logger.info(f"LHNN-NUTS sampling completed. Accept rate: {np.mean(accept_lhnn.numpy()):.4f}")
    logger.info(f"Number of monitoring gradient evaluations: {lhnn_monitoring_grads}")

    # ** Generate Figure 8 **
    logger.info("Generating plots...")
    plot_figure8(samples_nuts, samples_lhnn, burn_in=args.burn_in)

    # ** Compute performance metrics **
    logger.info("Computing performance metrics...")
    metrics = compute_neals_funnel_metrics(
        samples_nuts, nuts_grads,
        samples_lhnn, lhnn_monitoring_grads,
        burn_in=args.burn_in
    )

    elapsed_time = time.time() - start_time
    logger.info(f"Total execution time: {elapsed_time:.2f} seconds")

    return metrics


if __name__ == "__main__":
    """
    Main script to run the comparison experiments for 2D Neal's Funnel.
    """
    import os
    os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
    run_neals_funnel_comparison()
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import tensorflow_probability as tfp
from statsmodels.distributions.empirical_distribution import ECDF
from hnn_nuts_olm import nuts_hnn_sample, get_model
from get_args import get_args
from pathlib import Path
import datetime
from utils import setup_logger, compute_ess


def compute_table2_metrics(samples_nuts, nuts_grads,
                           samples_lhnn1, lhnn1_monitoring_grads,
                           samples_lhnn2, lhnn2_monitoring_grads,
                           samples_lhnn3, lhnn3_monitoring_grads,
                           burn_in=5000):
    """
    Compute the metrics for Table 2: Performance Comparison.

    This function computes Effective Sample Size (ESS), total number of gradients,
    and ESS per gradient for NUTS and LHNN-NUTS methods.

    Parameters
    ----------
    samples_nuts : np.ndarray
        Samples generated by NUTS.
    nuts_grads : int
        Total number of gradients evaluated by NUTS.
    samples_lhnn1 : np.ndarray
        Samples generated by LHNN-NUTS 1 (T=100).
    lhnn1_monitoring_grads : int
        Total number of gradients evaluated during error monitoring in LHNN-NUTS 1.
    samples_lhnn2 : np.ndarray
        Samples generated by LHNN-NUTS 2 (T=150).
    lhnn2_monitoring_grads : int
        Total number of gradients evaluated during error monitoring in LHNN-NUTS 2.
    samples_lhnn3 : np.ndarray
        Samples generated by LHNN-NUTS 3 (T=250).
    lhnn3_monitoring_grads : int
        Total number of gradients evaluated during error monitoring in LHNN-NUTS 3.
    burn_in : int, optional
        Number of initial samples to discard as burn-in. Defaults to 5000.

    Returns
    -------
    dict
        A dictionary containing ESS, average ESS, total gradients, and ESS per gradient
        for NUTS and LHNN-NUTS methods.
    """
    # ** Create logs directory if it doesn't exist **
    logs_dir = Path("logs")
    if not logs_dir.exists():
        logs_dir.mkdir(parents=True)
        print(f"\nCreated directory: {logs_dir}")

    # ** Create a timestamped log file **
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = logs_dir / f'table2_metrics_{timestamp}.log'

    def log_print(message):
        """
        Log a message to both the console and the log file.
        """
        print(message)
        with open(log_file, 'a') as f:
            f.write(message + '\n')

    # ** Compute ESS for each method **
    ess_nuts = compute_ess(samples_nuts, burn_in)
    ess_lhnn1 = compute_ess(samples_lhnn1, burn_in)
    ess_lhnn2 = compute_ess(samples_lhnn2, burn_in)
    ess_lhnn3 = compute_ess(samples_lhnn3, burn_in)

    # ** Compute training gradients for each LHNN-NUTS method **
    training_grads_1 = 40 * 100 * 40  # Mt=40, T=100, 40 steps per unit
    training_grads_2 = 40 * 150 * 40  # Mt=40, T=150, 40 steps per unit
    training_grads_3 = 40 * 250 * 40  # Mt=40, T=250, 40 steps per unit

    # ** Log the performance metrics **
    log_print("\n=== Table 2: Performance Comparison ===")
    log_print("{:<20} {:<35} {:<20} {:<15}".format(
        "Method", "ESS", "# gradients of", "Avg. ESS per"))
    log_print("{:<20} {:<35} {:<20} {:<15}".format(
        "", "", "target density", "gradient"))
    log_print("-" * 85)

    # ** NUTS Metrics **
    avg_ess_nuts = np.mean(ess_nuts)
    ess_per_grad_nuts = avg_ess_nuts / nuts_grads
    log_print("{:<20} ({:.2f}, {:.2f}, {:.2f})".format(
        "NUTS", *ess_nuts))
    log_print("{:<55} {:<20} {:.6f}".format(
        "", nuts_grads, ess_per_grad_nuts))
    log_print("")

    # ** LHNN-NUTS 1 Metrics (T=100) **
    avg_ess_lhnn1 = np.mean(ess_lhnn1)
    total_grads_lhnn1 = training_grads_1 + lhnn1_monitoring_grads
    ess_per_grad_lhnn1 = avg_ess_lhnn1 / total_grads_lhnn1
    log_print("[LHNN-NUTS 1]")
    log_print("{:<20} ({:.2f}, {:.2f}, {:.2f})".format(
        "Mt = 40; T = 100", *ess_lhnn1))
    log_print("{:<55} Evaluation: {}".format("", lhnn1_monitoring_grads))
    log_print("{:<55} Training: {}".format("", training_grads_1))
    log_print("{:<55} {:<20} {:.6f}".format(
        "", total_grads_lhnn1, ess_per_grad_lhnn1))
    log_print("")

    # ** LHNN-NUTS 2 Metrics (T=150) **
    avg_ess_lhnn2 = np.mean(ess_lhnn2)
    total_grads_lhnn2 = training_grads_2 + lhnn2_monitoring_grads
    ess_per_grad_lhnn2 = avg_ess_lhnn2 / total_grads_lhnn2
    log_print("[LHNN-NUTS 2]")
    log_print("{:<20} ({:.2f}, {:.2f}, {:.2f})".format(
        "Mt = 40; T = 150", *ess_lhnn2))
    log_print("{:<55} Evaluation: {}".format("", lhnn2_monitoring_grads))
    log_print("{:<55} Training: {}".format("", training_grads_2))
    log_print("{:<55} {:<20} {:.6f}".format(
        "", total_grads_lhnn2, ess_per_grad_lhnn2))
    log_print("")

    # ** LHNN-NUTS 3 Metrics (T=250) **
    avg_ess_lhnn3 = np.mean(ess_lhnn3)
    total_grads_lhnn3 = training_grads_3 + lhnn3_monitoring_grads
    ess_per_grad_lhnn3 = avg_ess_lhnn3 / total_grads_lhnn3
    log_print("[LHNN-NUTS 3]")
    log_print("{:<20} ({:.2f}, {:.2f}, {:.2f})".format(
        "Mt = 40; T = 250", *ess_lhnn3))
    log_print("{:<55} Evaluation: {}".format("", lhnn3_monitoring_grads))
    log_print("{:<55} Training: {}".format("", training_grads_3))
    log_print("{:<55} {:<20} {:.6f}".format(
        "", total_grads_lhnn3, ess_per_grad_lhnn3))

    # ** Return metrics as a dictionary **
    return {
        'NUTS': {'ess': ess_nuts, 'avg_ess': avg_ess_nuts, 'grads': nuts_grads, 'ess_per_grad': ess_per_grad_nuts},
        'LHNN1': {'ess': ess_lhnn1, 'avg_ess': avg_ess_lhnn1, 'grads': total_grads_lhnn1,
                  'ess_per_grad': ess_per_grad_lhnn1},
        'LHNN2': {'ess': ess_lhnn2, 'avg_ess': avg_ess_lhnn2, 'grads': total_grads_lhnn2,
                  'ess_per_grad': ess_per_grad_lhnn2},
        'LHNN3': {'ess': ess_lhnn3, 'avg_ess': avg_ess_lhnn3, 'grads': total_grads_lhnn3,
                  'ess_per_grad': ess_per_grad_lhnn3}
    }


def plot_figure7(samples_nuts, samples_lhnn1, samples_lhnn2, samples_lhnn3, burn_in):
    """
    Generate Figure 7: Comparison of empirical cumulative distribution functions (eCDFs).

    This function visualizes the eCDFs of samples generated by NUTS and LHNN-NUTS methods
    for three variables (q1, q2, q3).

    Parameters
    ----------
    samples_nuts : np.ndarray
        Samples generated by NUTS.
    samples_lhnn1 : np.ndarray
        Samples generated by LHNN-NUTS 1.
    samples_lhnn2 : np.ndarray
        Samples generated by LHNN-NUTS 2.
    samples_lhnn3 : np.ndarray
        Samples generated by LHNN-NUTS 3.
    burn_in : int
        Number of initial samples to discard as burn-in.
    """
    plt.figure(figsize=(15, 4))

    # ** Remove burn-in samples **
    samples_nuts = samples_nuts[:, burn_in:, :]
    samples_lhnn1 = samples_lhnn1[:, burn_in:, :]
    samples_lhnn2 = samples_lhnn2[:, burn_in:, :]
    samples_lhnn3 = samples_lhnn3[:, burn_in:, :]

    # ** q1 plot **
    plt.subplot(131)
    x_eval = np.linspace(-3, 3, 1000)  # Adjust range based on data
    # Compute eCDFs for q1
    ecdf_nuts = ECDF(samples_nuts[0, :, 0])
    ecdf_lhnn1 = ECDF(samples_lhnn1[0, :, 0])
    ecdf_lhnn2 = ECDF(samples_lhnn2[0, :, 0])
    ecdf_lhnn3 = ECDF(samples_lhnn3[0, :, 0])
    # Plot eCDF curves
    plt.plot(x_eval, ecdf_nuts(x_eval), 'k-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn1(x_eval), 'r--', label='LHNN-NUTS 1')
    plt.plot(x_eval, ecdf_lhnn2(x_eval), 'b--', label='LHNN-NUTS 2')
    plt.plot(x_eval, ecdf_lhnn3(x_eval), 'g--', label='LHNN-NUTS 3')
    plt.title('q1')
    plt.xlabel('Value')
    plt.ylabel('Probability')
    plt.legend()

    # ** q2 plot **
    plt.subplot(132)
    x_eval = np.linspace(0, 8, 1000)  # Adjust range based on data
    # Compute eCDFs for q2
    ecdf_nuts = ECDF(samples_nuts[0, :, 1])
    ecdf_lhnn1 = ECDF(samples_lhnn1[0, :, 1])
    ecdf_lhnn2 = ECDF(samples_lhnn2[0, :, 1])
    ecdf_lhnn3 = ECDF(samples_lhnn3[0, :, 1])
    # Plot eCDF curves
    plt.plot(x_eval, ecdf_nuts(x_eval), 'k-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn1(x_eval), 'r--', label='LHNN-NUTS 1')
    plt.plot(x_eval, ecdf_lhnn2(x_eval), 'b--', label='LHNN-NUTS 2')
    plt.plot(x_eval, ecdf_lhnn3(x_eval), 'g--', label='LHNN-NUTS 3')
    plt.title('q2')
    plt.xlabel('Value')
    plt.ylabel('Probability')
    plt.legend()

    # ** q3 plot **
    plt.subplot(133)
    x_eval = np.linspace(0, 80, 1000)  # Adjust range based on data
    # Compute eCDFs for q3
    ecdf_nuts = ECDF(samples_nuts[0, :, 2])
    ecdf_lhnn1 = ECDF(samples_lhnn1[0, :, 2])
    ecdf_lhnn2 = ECDF(samples_lhnn2[0, :, 2])
    ecdf_lhnn3 = ECDF(samples_lhnn3[0, :, 2])
    # Plot eCDF curves
    plt.plot(x_eval, ecdf_nuts(x_eval), 'k-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn1(x_eval), 'r--', label='LHNN-NUTS 1')
    plt.plot(x_eval, ecdf_lhnn2(x_eval), 'b--', label='LHNN-NUTS 2')
    plt.plot(x_eval, ecdf_lhnn3(x_eval), 'g--', label='LHNN-NUTS 3')
    plt.title('q3')
    plt.xlabel('Value')
    plt.ylabel('Probability')
    plt.legend()

    # ** Save and display the figure **
    figures_dir = Path("figures")
    if not figures_dir.exists():
        figures_dir.mkdir(parents=True)
        print(f"\nCreated directory: {figures_dir}")

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = figures_dir / f'figure_7_reproduction_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.tight_layout()
    plt.show()


def run_comparison():
    """
    Run the comparison experiments and generate Table 2 and Figure 7.

    This function:
    1. Configures the sampling parameters for NUTS and LHNN-NUTS methods.
    2. Runs the sampling for NUTS and LHNN-NUTS methods with different configurations.
    3. Computes metrics for Table 2.
    4. Visualizes eCDFs for Figure 7.
    """
    # ** Set up basic parameters **
    args = get_args()
    args.dist_name = 'nD_Rosenbrock'
    args.input_dim = 6  # 3D Rosenbrock
    args.latent_dim = 100
    args.total_samples = 20  # Total samples (adjust as needed)
    args.burn_in = 5
    args.nuts_step_size = 0.025
    args.hnn_error_threshold = 10.0
    args.num_chains = 1
    args.n_cooldown = 20

    # ** Run traditional NUTS **
    print("\n===== Running Traditional NUTS =====")
    model_trad = get_model(args)
    samples_nuts, accept_nuts, errors_nuts, nuts_grads = nuts_hnn_sample(
        model_trad, args,
        traditional_only=True
    )

    # ** Run LHNN-NUTS 1 (T=100) **
    print("\n===== Running LHNN-NUTS 1 =====")
    model_lhnn1 = get_model(args)
    model_lhnn1.load_weights(f"{args.save_dir}/nD_Rosenbrock100")
    samples_lhnn1, accept_lhnn1, errors_lhnn1, lhnn1_monitoring_grads = nuts_hnn_sample(
        model_lhnn1, args,
        traditional_only=False
    )

    # ** Run LHNN-NUTS 2 (T=150) **
    print("\n===== Running LHNN-NUTS 2 =====")
    model_lhnn2 = get_model(args)
    model_lhnn2.load_weights(f"{args.save_dir}/nD_Rosenbrock150")
    samples_lhnn2, accept_lhnn2, errors_lhnn2, lhnn2_monitoring_grads = nuts_hnn_sample(
        model_lhnn2, args,
        traditional_only=False
    )

    # ** Run LHNN-NUTS 3 (T=250) **
    print("\n===== Running LHNN-NUTS 3 =====")
    model_lhnn3 = get_model(args)
    model_lhnn3.load_weights(f"{args.save_dir}/nD_Rosenbrock250")
    samples_lhnn3, accept_lhnn3, errors_lhnn3, lhnn3_monitoring_grads = nuts_hnn_sample(
        model_lhnn3, args,
        traditional_only=False
    )

    # ** Compute and log Table 2 metrics **
    metrics = compute_table2_metrics(
        samples_nuts, nuts_grads,
        samples_lhnn1, lhnn1_monitoring_grads,
        samples_lhnn2, lhnn2_monitoring_grads,
        samples_lhnn3, lhnn3_monitoring_grads,
        burn_in=args.burn_in
    )

    # ** Generate Figure 7 **
    plot_figure7(samples_nuts, samples_lhnn1, samples_lhnn2, samples_lhnn3, burn_in=args.burn_in)


if __name__ == "__main__":
    """
    Main script to run the comparison experiments and generate Table 2 and Figure 7.
    """
    import os
    os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
    run_comparison()